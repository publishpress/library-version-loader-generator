#!/usr/bin/env php
<?php

echo "Generating version manager files...\n";

$binDir = $_composer_bin_dir ?? __DIR__ . '/../../vendor/bin';
$projectPath = dirname($binDir, 2);


// Get current version from composer.json
$composerJson = file_get_contents($projectPath . '/composer.json');
$composerData = json_decode($composerJson, true);
$version = $composerData['version'];
$name = $composerData['name'];
$srcDir = $composerData['extra']['generator']['src-dir'] ?? 'lib';
$actionInitializingPriority = $composerData['extra']['generator']['action-initialize-priority'] ?? '-90';
$actionRegisteringPriority = $composerData['extra']['generator']['action-register-priority'] ?? '-100';

// Convert the $name to a valid PHP namespace using camel case
$namespace = str_replace('-', '', ucwords($name, '-/\\'));
$namespace = str_replace('/', '\\', $namespace);
$namespace = str_replace('Publishpress', 'PublishPress', $namespace);

$versionStrForFunction = str_replace('.', 'Dot', $version);

$classTest = $composerData['extra']['generator']['lib-class-test'];

$actionPrefix = preg_replace_callback(
    '/([A-Z])/',
    function ($matches) {
        return '_' . strtolower($matches[1]);
    },
    $namespace
);
$actionPrefix = str_replace('\\', '', $actionPrefix);
$actionPrefix = str_replace('publish_press', 'publishpress', $actionPrefix);
$actionPrefix = ltrim($actionPrefix, '_');

function generateIncludeFile(
    $namespace,
    $version,
    $versionStrForFunction,
    $classTest,
    $actionPrefix,
    $projectPath,
    $srcDir,
    $actionInitializingPriority,
    $actionRegisteringPriority
) {
    $includeFile = $projectPath . '/' . $srcDir . '/include.php';

    if (file_exists($includeFile)) {
        unlink($includeFile);
    }

    echo "Generating file src/include.php\n";

    $constantNamePrefix = preg_replace_callback(
        '/([A-Z])/',
        function ($matches) {
            return '_' . $matches[1];
        },
        $namespace
    );
    $constantNamePrefix = ltrim($constantNamePrefix, '_');

    $constantNamePrefix = strtoupper(str_replace('\\', '_', $constantNamePrefix));
    $constantNamePrefix = str_replace('__', '_', $constantNamePrefix);
    $constantNamePrefix = str_replace('PUBLISH_PRESS', 'PUBLISHPRESS', $constantNamePrefix);

    $versionConstantName = $constantNamePrefix . '_VERSION';
    $includedConstantName = $constantNamePrefix . '_INCLUDED';

    // Create the include.php file
    $template = <<<TEMPLATE
/*****************************************************************
 * This file is generated on composer update command by
 * a custom script. 
 * 
 * Do not edit it manually!
 ****************************************************************/

namespace {$namespace};

use function add_action;
use function do_action;

if (! function_exists('add_action')) {
    return;
}

if (! function_exists(__NAMESPACE__ . '\\register{$versionStrForFunction}')) {
    if (! defined('{$includedConstantName}')) {
        define('{$includedConstantName}', __DIR__);
    }
        
    if (! class_exists('{$namespace}\\Versions')) {
        require_once __DIR__ . '/Versions.php';

        add_action('plugins_loaded', [Versions::class, 'initializeLatestVersion'], {$actionInitializingPriority}, 0);
    }

    add_action('plugins_loaded', __NAMESPACE__ . '\\register{$versionStrForFunction}', {$actionRegisteringPriority}, 0);

    function register{$versionStrForFunction}()
    {
        if (! {$classTest}) {
            \$versions = Versions::getInstance();
            \$versions->register('{$version}', __NAMESPACE__ . '\\initialize{$versionStrForFunction}');
        }
    }

    function initialize{$versionStrForFunction}()
    {
        require_once __DIR__ . '/autoload.php';
        
        if (! defined('{$versionConstantName}')) {
            define('{$versionConstantName}', '{$version}');
        }
        
        do_action('{$actionPrefix}_{$versionStrForFunction}_initialized');
    }
}

TEMPLATE;

    $fileContent = "<?php\n\n" . $template;

    file_put_contents($projectPath . '/' . $srcDir . '/include.php', $fileContent);
}

function generateVersionClassFile($namespace, $version, $versionStrForFunction, $projectPath, $srcDir)
{
    $versionClassFile = $projectPath . '/' . $srcDir . '/Versions.php';

    if (file_exists($versionClassFile)) {
        unlink($versionClassFile);
    }

    echo "Generating file src/Versions.php\n";

    $namespaceStr = str_replace('\\', '\\\\', $namespace);

    // Create the Versions.php file
    $template = <<<TEMPLATE

/*****************************************************************
 * This file is generated on composer update command by
 * a custom script. 
 * 
 * Do not edit it manually!
 ****************************************************************/
 
namespace {$namespace};

if (! class_exists('{$namespaceStr}\\\\Versions')) {
    /**
     * Based on the ActionScheduler_Versions class from Action Scheduler library.
     */
    class Versions
    {
        /**
         * @var Versions
         */
        private static \$instance = null;

        private \$versions = array();

        public function register(\$versionString, \$initializationCallback): bool
        {
            if (isset(\$this->versions[\$versionString])) {
                return false;
            }

            \$this->versions[\$versionString] = \$initializationCallback;

            return true;
        }

        public function getVersions(): array
        {
            return \$this->versions;
        }

        public function latestVersion()
        {
            \$keys = array_keys(\$this->versions);
            if (empty(\$keys)) {
                return false;
            }
            uasort(\$keys, 'version_compare');
            return end(\$keys);
        }

        public function latestVersionCallback()
        {
            \$latest = \$this->latestVersion();
            if (empty(\$latest) || ! isset(\$this->versions[\$latest])) {
                return '__return_null';
            }

            return \$this->versions[\$latest];
        }

        /**
         * @return Versions
         * @codeCoverageIgnore
         */
        public static function getInstance(): ?Versions
        {
            if (empty(self::\$instance)) {
                self::\$instance = new self();
            }

            return self::\$instance;
        }

        /**
         * @codeCoverageIgnore
         */
        public static function initializeLatestVersion(): void
        {
            \$self = self::getInstance();

            call_user_func(\$self->latestVersionCallback());
        }
    }
}

TEMPLATE;
    $fileContent = "<?php\n\n" . $template;

    file_put_contents($projectPath . '/' . $srcDir . '/Versions.php', $fileContent);
}

function generateTestFile($namespace, $version, $versionStrForFunction, $classTest, $actionPrefix, $projectPath)
{
    $testFile = $projectPath . '/tests/VersionManagerTest.php';

    if (file_exists($testFile)) {
        unlink($testFile);
    }

    echo "Generating file tests/VersionManagerTest.php\n";

    $namespaceStr = str_replace('\\', '\\\\', $namespace);

    // Create the Versions.php file
    $template = <<<TEMPLATE
/*****************************************************************
 * This file is generated on composer update command by
 * a custom script. 
 * 
 * Do not edit it manually!
 ****************************************************************/

use {$namespace}\Versions;

class VersionsCest
{
    public function testAllVersionsAreRegistered(WpunitTester \$I)
    {
        \$versions = Versions::getInstance();

        \$registeredVersions = \$versions->getVersions();

        \$I->assertNotEmpty(\$registeredVersions);
        \$I->assertEquals([
            '2.0.0.1' => '{$namespace}\initialize2Dot0Dot0Dot1',
            '2.0.0.2' => '{$namespace}\initialize2Dot0Dot0Dot2',
            '{$version}' => '{$namespace}\initialize{$versionStrForFunction}',
        ], \$registeredVersions);
    }

    public function testLatestVersionIsTheCurrentVersion(WpunitTester \$I)
    {
        \$versions = Versions::getInstance();

        \$latestVersion = \$versions->latestVersion();

        \$I->assertEquals('{$version}', \$latestVersion);
    }

    public function testLatestVersionCallbackIsTheLastOne(WpunitTester \$I)
    {
        \$versions = Versions::getInstance();

        \$latestVersionCallback = \$versions->latestVersionCallback();

        \$I->assertEquals('{$namespace}\\initialize{$versionStrForFunction}', \$latestVersionCallback);
    }

    public function testInitializeLatestVersion(WpunitTester \$I)
    {
        \$versions = Versions::getInstance();

        \$versions->initializeLatestVersion();

        \$I->assertTrue({$classTest});

        \$didAction = (bool)did_action('{$actionPrefix}_{$versionStrForFunction}_initialized');
        \$I->assertTrue(\$didAction);
    }
}

TEMPLATE;

    $fileContent = "<?php\n\n" . $template;

    file_put_contents($projectPath . '/tests/wpunit/VersionsCest.php', $fileContent);
}

generateIncludeFile(
    $namespace,
    $version,
    $versionStrForFunction,
    $classTest,
    $actionPrefix,
    $projectPath,
    $srcDir,
    $actionInitializingPriority,
    $actionRegisteringPriority
);

generateVersionClassFile(
    $namespace,
    $version,
    $versionStrForFunction,
    $projectPath,
    $srcDir
);

generateTestFile(
    $namespace,
    $version,
    $versionStrForFunction,
    $classTest,
    $actionPrefix,
    $projectPath
);

echo "Versions file generated successfully\n";
